version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>:"
            echo "Frontend: empty bucket then delete stack"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            echo "Backend: delete stack"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/7TDsigXE7tZFpbVVzfJrZx/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            ## npm audit --audit-level=critical
            echo "Deliberately skipping actual audit due to outdated NextJS version that is out-of-scope to fix in this project"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  configure-infrastructure:
    docker:
      - image: python:3.11-alpine
    steps:
      - checkout
      - aws-cli/install
      - add_ssh_keys:
          fingerprints: ["f9:56:6d:26:e1:e4:f5:41:c2:17:37:30:d0:1b:a9:d0"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/7TDsigXE7tZFpbVVzfJrZx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - aws-cli/install
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Using aws client from the orb, installed above with '-aws-cli/install'
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -n 1 .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.11-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f9:56:6d:26:e1:e4:f5:41:c2:17:37:30:d0:1b:a9:d0"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt -vvv deploy-backend.yml
            ## Add small sleep to ensure server process has enough time to initialise before backend smoke test attempts to hit it
            sleep 5
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  smoke-test:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # curl and aws included in image
      - run:
          name: Get backend url
          command: |
            # Maybe I'm missing something but it seems like more faff to to do this in a separate step?
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -n 1 .circleci/ansible/inventory.txt)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  cloudfront-update:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # aws included in image
      - run:
          name: Save the old stack workflow id
          command: |
            ## Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  cleanup:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Why does CircleCI make it so hard to persist environment across steps?
            # There's literally no point in doing this bit in a separate step, it's
            # just unnecessary pain
      - run:
          name: Remove old stacks and files
          command: |
            ## Fetch the Old workflow ID
            export OLD_WORKFLOW_ID=$(cat ~/OldWorkflowID.txt)
            echo OLD_WORKFLOW_ID: "${OLD_WORKFLOW_ID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            ## Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              echo "Deleting stacks for workflow ID ${OLD_WORKFLOW_ID}"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            else
              echo "Unable to cleanup"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
